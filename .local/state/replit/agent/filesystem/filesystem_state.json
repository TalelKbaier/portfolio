{"file_contents":{"replit.md":{"content":"# Overview\n\nThis project is a modern Angular portfolio website for a Cloud Engineer & Web Developer. It showcases professional experience, technical skills, projects, and contact information through an interactive and visually appealing single-page application. The portfolio features bilingual support (French/English), dark/light theme switching, smooth animations, and responsive design to provide an engaging user experience across all devices.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe application is built using **Angular 20** with a component-based architecture following Angular best practices. The main structure consists of:\n\n- **App Component**: Root component that manages theme and language initialization\n- **Feature Components**: Modular sections (Header, Home, About, Skills, Experience, Projects, Contact)\n- **Services Layer**: Centralized business logic for theme management and translations\n- **Assets Structure**: Organized i18n files for multilingual support\n\n## Design Patterns\n- **Service-Oriented Architecture**: Core functionality separated into injectable services (ThemeService, TranslationService)\n- **Component Communication**: Services use RxJS BehaviorSubjects for reactive state management\n- **Modular Design**: Each portfolio section is an independent, reusable component\n\n## State Management\n- **Theme State**: Managed through ThemeService with localStorage persistence and system preference detection\n- **Language State**: Handled by TranslationService with JSON-based translation files\n- **Reactive Updates**: All state changes propagated via Observable streams\n\n## UI/UX Design\n- **Responsive Layout**: Mobile-first approach with CSS Grid and Flexbox\n- **Animation System**: Integrated AOS (Animate On Scroll) library for smooth scroll-triggered animations\n- **Theme System**: CSS custom properties for seamless dark/light mode switching\n- **Typography**: Google Fonts (Inter) for consistent, modern appearance\n\n## Navigation & Routing\n- **Single Page Application**: Smooth scroll navigation between sections using anchor links\n- **Dynamic Menu**: Mobile-responsive hamburger menu with active state management\n- **Scroll Behavior**: Custom smooth scrolling implementation with scroll-to-top functionality\n\n# External Dependencies\n\n## Core Framework\n- **Angular 20**: Primary framework for component-based architecture\n- **RxJS 7.8**: Reactive programming for state management\n- **TypeScript 5.9**: Type-safe development environment\n\n## Build & Development Tools\n- **Webpack 5**: Module bundling and build optimization\n- **Angular CLI**: Development server and build tooling\n- **Angular DevKit**: Build system and development utilities\n\n## UI Libraries & Styling\n- **Font Awesome 6.4**: Icon library for consistent iconography\n- **Google Fonts (Inter)**: Modern typography system\n- **Material Icons**: Additional icon set for UI elements\n- **Angular Material 17**: UI component library (prebuilt themes)\n\n## Animation & Interactions\n- **AOS (Animate On Scroll)**: Scroll-triggered animations for enhanced user experience\n- **Angular Animations**: Built-in animation system for component transitions\n\n## Development Dependencies\n- **Node.js Types**: TypeScript definitions for Node.js environment\n- **TSLib**: TypeScript runtime library\n- **Zone.js**: Angular change detection mechanism\n\n## Browser Compatibility\n- **Modern ES6+ Support**: Targeting current browser standards\n- **CSS Grid & Flexbox**: Modern layout techniques\n- **CSS Custom Properties**: For dynamic theming capabilities\n\nThe application is designed as a static frontend that can be easily deployed to any web hosting platform or CDN, with all functionality contained within the client-side Angular application.","size_bytes":3804},"src/polyfills.ts":{"content":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes recent versions of Safari, Chrome (including\n * Opera), Edge on the desktop, and iOS and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will disable zone.js patch for the specified\n * You can use these flags to reduce the bundle size, but be aware that\n * they might break some libraries that depend on zone.js.\n */\n\n// (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n// (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n// (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified events\n\n/*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js';  // Included with Angular CLI.\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */","size_bytes":2474},"src/app/app.component.ts":{"content":"import { Component, OnInit, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThemeService } from './services/theme.service';\nimport { TranslationService } from './services/translation.service';\n\n// Import all components\nimport { HeaderComponent } from './components/header/header.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { AboutComponent } from './components/about/about.component';\nimport { SkillsComponent } from './components/skills/skills.component';\nimport { ExperienceComponent } from './components/experience/experience.component';\nimport { ProjectsComponent } from './components/projects/projects.component';\nimport { ContactComponent } from './components/contact/contact.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    CommonModule,\n    HeaderComponent,\n    HomeComponent,\n    AboutComponent,\n    SkillsComponent,\n    ExperienceComponent,\n    ProjectsComponent,\n    ContactComponent\n  ],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  @HostBinding('class') get themeClass() {\n    return this.themeService.currentTheme;\n  }\n\n  showScrollButton = false;\n\n  constructor(\n    private themeService: ThemeService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    // Initialize theme detection\n    this.themeService.initializeTheme();\n    \n    // Initialize language detection\n    this.translationService.initializeLanguage();\n    \n    // Smooth scroll behavior\n    this.initializeSmoothScroll();\n    \n    // Scroll to top button visibility\n    this.initializeScrollButton();\n  }\n\n  scrollToTop() {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }\n\n  private initializeScrollButton() {\n    window.addEventListener('scroll', () => {\n      this.showScrollButton = window.pageYOffset > 500;\n    });\n  }\n\n  private initializeSmoothScroll() {\n    document.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.tagName === 'A' && target.getAttribute('href')?.startsWith('#')) {\n        e.preventDefault();\n        const targetId = target.getAttribute('href')!.substring(1);\n        const targetElement = document.getElementById(targetId);\n        if (targetElement) {\n          targetElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'start'\n          });\n        }\n      }\n    });\n  }\n}\n","size_bytes":2515},"src/app/main.ts":{"content":"import '../polyfills';\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { importProvidersFrom } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n// Import main app component\nimport { AppComponent } from './app.component';\n\n// Import services\nimport { ThemeService } from './services/theme.service';\nimport { TranslationService } from './services/translation.service';\n\n// Declare AOS for TypeScript\ndeclare var AOS: any;\n\n// Initialize AOS when the application starts\nfunction initializeAOS() {\n  if (typeof AOS !== 'undefined') {\n    AOS.init({\n      duration: 1000,\n      easing: 'ease-in-out',\n      once: true,\n      mirror: false\n    });\n  }\n}\n\n// Bootstrap the application\nbootstrapApplication(AppComponent, {\n  providers: [\n    importProvidersFrom(\n      BrowserAnimationsModule,\n      CommonModule,\n      FormsModule\n    ),\n    ThemeService,\n    TranslationService\n  ]\n}).then(() => {\n  // Initialize AOS after the application loads\n  setTimeout(initializeAOS, 100);\n}).catch(err => console.error(err));\n","size_bytes":1184},"src/app/services/theme.service.ts":{"content":"import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n  private _currentTheme = new BehaviorSubject<string>('light');\n  public currentTheme$ = this._currentTheme.asObservable();\n\n  get currentTheme(): string {\n    return this._currentTheme.value;\n  }\n\n  constructor() {}\n\n  initializeTheme(): void {\n    // Check for saved theme preference or default to system preference\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      this.setTheme(savedTheme);\n    } else {\n      // Detect system preference\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      this.setTheme(prefersDark ? 'dark' : 'light');\n    }\n\n    // Listen for system theme changes\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {\n      if (!localStorage.getItem('theme')) {\n        this.setTheme(e.matches ? 'dark' : 'light');\n      }\n    });\n  }\n\n  setTheme(theme: string): void {\n    this._currentTheme.next(theme);\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n  }\n\n  toggleTheme(): void {\n    const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';\n    this.setTheme(newTheme);\n  }\n}\n","size_bytes":1328},"src/app/services/translation.service.ts":{"content":"import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslationService {\n  private _currentLanguage = new BehaviorSubject<string>('fr');\n  public currentLanguage$ = this._currentLanguage.asObservable();\n  \n  private translations: { [key: string]: any } = {};\n\n  get currentLanguage(): string {\n    return this._currentLanguage.value;\n  }\n\n  constructor() {\n    this.loadTranslations();\n  }\n\n  async loadTranslations(): Promise<void> {\n    try {\n      // Load French translations\n      const frResponse = await fetch('assets/i18n/fr.json');\n      this.translations['fr'] = await frResponse.json();\n      \n      // Load English translations\n      const enResponse = await fetch('assets/i18n/en.json');\n      this.translations['en'] = await enResponse.json();\n    } catch (error) {\n      console.error('Error loading translations:', error);\n      // Fallback translations avec structure hiérarchique\n      this.translations = {\n        'fr': {\n          nav: {\n            home: 'Accueil',\n            about: 'À propos',\n            skills: 'Compétences',\n            experience: 'Expérience',\n            projects: 'Projets',\n            contact: 'Contact'\n          },\n          skills: {\n            title: 'Compétences & Expertise',\n            subtitle: 'Technologies et outils que j\\'utilise'\n          },\n          experience: {\n            title: 'Expérience & Formation',\n            subtitle: 'Mon parcours professionnel'\n          }\n        },\n        'en': {\n          nav: {\n            home: 'Home',\n            about: 'About',\n            skills: 'Skills',\n            experience: 'Experience',\n            projects: 'Projects',\n            contact: 'Contact'\n          },\n          skills: {\n            title: 'Skills & Expertise',\n            subtitle: 'Technologies and tools I work with'\n          },\n          experience: {\n            title: 'Experience & Education',\n            subtitle: 'My professional journey'\n          }\n        }\n      };\n    }\n  }\n\n  initializeLanguage(): void {\n    const savedLanguage = localStorage.getItem('language');\n    if (savedLanguage && ['fr', 'en'].includes(savedLanguage)) {\n      this.setLanguage(savedLanguage);\n    } else {\n      // Detect browser language\n      const browserLang = navigator.language.startsWith('fr') ? 'fr' : 'en';\n      this.setLanguage(browserLang);\n    }\n  }\n\n  setLanguage(language: string): void {\n    this._currentLanguage.next(language);\n    localStorage.setItem('language', language);\n    document.documentElement.setAttribute('lang', language);\n  }\n\n  translate(key: string): string {\n    const keys = key.split('.');\n    let translation: any = this.translations[this.currentLanguage];\n    \n    for (const k of keys) {\n      translation = translation?.[k];\n      if (!translation) break;\n    }\n    \n    return (typeof translation === 'string' ? translation : key);\n  }\n\n  toggleLanguage(): void {\n    const newLanguage = this.currentLanguage === 'fr' ? 'en' : 'fr';\n    this.setLanguage(newLanguage);\n  }\n}\n","size_bytes":3086},"src/app/components/about/about.component.ts":{"content":"import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslationService } from '../../services/translation.service';\n\n@Component({\n  selector: 'app-about',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.scss']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor(private translationService: TranslationService) {}\n\n  ngOnInit() {}\n\n  translate(key: string): string {\n    return this.translationService.translate(key);\n  }\n}\n","size_bytes":566},"src/app/components/contact/contact.component.ts":{"content":"import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TranslationService } from '../../services/translation.service';\n\ninterface ContactMethod {\n  icon: string;\n  title: string;\n  value: string;\n  link: string;\n  color: string;\n}\n\n@Component({\n  selector: 'app-contact',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.scss']\n})\nexport class ContactComponent implements OnInit {\n  \n  contactMethods: ContactMethod[] = [\n    {\n      icon: 'fas fa-envelope',\n      title: 'Email',\n      value: 'k.talel99@gmail.com',\n      link: 'mailto:k.talel99@gmail.com',\n      color: '#ea4335'\n    },\n    {\n      icon: 'fas fa-phone',\n      title: 'Téléphone',\n      value: '+216 20 887 855',\n      link: 'tel:+21620887855',\n      color: '#4285f4'\n    },\n    {\n      icon: 'fab fa-linkedin',\n      title: 'LinkedIn',\n      value: 'Talel Kbaier',\n      link: 'https://linkedin.com/in/talel-kbaier',\n      color: '#0077b5'\n    },\n    {\n      icon: 'fab fa-github',\n      title: 'GitHub',\n      value: 'talel-kbaier',\n      link: 'https://github.com/talel-kbaier',\n      color: '#333'\n    }\n  ];\n\n  formData = {\n    name: '',\n    email: '',\n    subject: '',\n    message: ''\n  };\n\n  isSubmitting = false;\n  submitSuccess = false;\n  submitError = false;\n\n  constructor(private translationService: TranslationService) {}\n\n  ngOnInit() {}\n\n  translate(key: string): string {\n    return this.translationService.translate(key);\n  }\n\n  onSubmit() {\n    if (this.isValidForm()) {\n      this.isSubmitting = true;\n      \n      // Simulate form submission\n      setTimeout(() => {\n        this.isSubmitting = false;\n        this.submitSuccess = true;\n        this.resetForm();\n        \n        // Hide success message after 5 seconds\n        setTimeout(() => {\n          this.submitSuccess = false;\n        }, 5000);\n      }, 2000);\n    }\n  }\n\n  isValidForm(): boolean {\n    return !!(\n      this.formData.name.trim() &&\n      this.formData.email.trim() &&\n      this.formData.subject.trim() &&\n      this.formData.message.trim() &&\n      this.isValidEmail(this.formData.email)\n    );\n  }\n\n  isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  resetForm() {\n    this.formData = {\n      name: '',\n      email: '',\n      subject: '',\n      message: ''\n    };\n  }\n\n  downloadCV() {\n    // Create a mock CV download - in real implementation, this would download an actual PDF\n    const link = document.createElement('a');\n    link.href = 'data:text/plain;charset=utf-8,CV - Talel Kbaier - Développeur Cloud & Web';\n    link.download = 'CV_Talel_Khaldi.pdf';\n    link.click();\n  }\n}\n","size_bytes":2825},"src/app/components/experience/experience.component.ts":{"content":"import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslationService } from '../../services/translation.service';\n\ninterface Experience {\n  year: string;\n  title: string;\n  company: string;\n  description: string;\n  technologies: string[];\n  type: 'work' | 'education' | 'competition';\n  location?: string;\n  duration?: string;\n}\n\n@Component({\n  selector: 'app-experience',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './experience.component.html',\n  styleUrls: ['./experience.component.scss']\n})\nexport class ExperienceComponent implements OnInit {\n  \n  experiences: Experience[] = [\n    {\n      year: '2023 - Présent',\n      title: 'Développeur',\n      company: 'Triweb',\n      description: 'Conception, développement et déploiement d\\'applications, mise en place d\\'infrastructures serveur sous Ubuntu et automatisation de processus métier.',\n      technologies: ['Angular', 'Spring Boot', 'Docker', 'Ubuntu', 'CI/CD'],\n      type: 'work',\n      duration: '1+ an'\n    },\n    {\n      year: '2022-Présent',\n      title: 'Ingénierie en informatique (Cloud Computing & Architecture)',\n      company: 'ESPRIT',\n      description: 'Formation spécialisée en architecture cloud, développement d\\'applications distribuées et technologies émergentes.',\n      technologies: ['Cloud Computing', 'Architecture', 'DevOps', 'Microservices'],\n      type: 'education',\n      location: 'Tunis, Tunisia'\n    },\n    {\n      year: '2022',\n      title: 'Développeur Freelance',\n      company: 'Indépendant',\n      description: 'Développement de solutions web personnalisées pour divers clients, gestion de projets en autonomie.',\n      technologies: ['WordPress', 'PHP', 'JavaScript', 'CSS'],\n      type: 'work',\n      duration: '6 mois'\n    },\n    {\n      year: '2021',\n      title: 'Business Analytics (Stage PFE)',\n      company: 'Assurance COMAR',\n      description: 'Développement de tableaux de bord analytiques et mise en place de solutions BI pour l\\'optimisation des processus métier.',\n      technologies: ['Power BI', 'SQL Server', 'Python', 'Data Analysis'],\n      type: 'work',\n      duration: '5 mois'\n    },\n    {\n      year: '2021',\n      title: 'Développeur WordPress',\n      company: 'Projets clients',\n      description: 'Création et personnalisation de sites web WordPress, optimisation SEO et maintenance.',\n      technologies: ['WordPress', 'PHP', 'MySQL', 'SEO'],\n      type: 'work',\n      duration: '8 mois'\n    },\n    {\n      year: '2020-2022',\n      title: 'Licence en Business Intelligence',\n      company: 'FSEGT',\n      description: 'Formation en analyse de données, développement de solutions BI et gestion de projets analytiques.',\n      technologies: ['BI', 'Data Analysis', 'SQL', 'Power BI'],\n      type: 'education',\n      location: 'Tunis, Tunisia'\n    }\n  ];\n\n  competitions = [\n    {\n      year: '2021',\n      title: '1er prix Hackathon IEEE',\n      company: 'ISET Bizerte',\n      description: 'Développement d\\'une solution innovante en équipe lors du hackathon organisé par IEEE ISET Bizerte.',\n      technologies: ['Innovation', 'Teamwork', 'Problem Solving'],\n      type: 'competition' as const\n    },\n    {\n      year: '2020/2021',\n      title: 'Finaliste OSTx Open Startup',\n      company: 'Open Startup Tunisia',\n      description: 'Participation au programme d\\'accélération de startups avec un projet technologique innovant.',\n      technologies: ['Entrepreneurship', 'Innovation', 'Pitch'],\n      type: 'competition' as const\n    }\n  ];\n\n  associativeRoles = [\n    {\n      year: '2022-2023',\n      title: 'Vice-président',\n      company: 'Rotary Carthage La Baie Espoir',\n      description: 'Coordination des activités associatives et gestion d\\'équipes pour des projets communautaires.',\n      technologies: ['Leadership', 'Management', 'Community Service'],\n      type: 'work' as const\n    },\n    {\n      year: '2021-2022',\n      title: 'Président',\n      company: 'Rotaract Tunis El Manar',\n      description: 'Direction de l\\'association étudiante, organisation d\\'événements et développement de partenariats.',\n      technologies: ['Leadership', 'Event Management', 'Networking'],\n      type: 'work' as const\n    },\n    {\n      year: '2018-2019',\n      title: 'Président',\n      company: 'BIL Omrane Supérieur',\n      description: 'Gestion de l\\'association lycéenne et coordination des activités étudiantes.',\n      technologies: ['Leadership', 'Organization', 'Communication'],\n      type: 'work' as const\n    }\n  ];\n\n  activeTab = 'professional';\n\n  constructor(private translationService: TranslationService) {}\n\n  ngOnInit() {}\n\n  translate(key: string): string {\n    return this.translationService.translate(key);\n  }\n\n  setActiveTab(tab: string) {\n    this.activeTab = tab;\n  }\n\n  getCurrentExperiences() {\n    switch (this.activeTab) {\n      case 'professional':\n        return this.experiences.filter(exp => exp.type === 'work');\n      case 'education':\n        return this.experiences.filter(exp => exp.type === 'education');\n      case 'competitions':\n        return this.competitions;\n      case 'associative':\n        return this.associativeRoles;\n      default:\n        return this.experiences;\n    }\n  }\n}\n","size_bytes":5270},"src/app/components/header/header.component.ts":{"content":"import { Component, OnInit, HostListener } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThemeService } from '../../services/theme.service';\nimport { TranslationService } from '../../services/translation.service';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n  isMenuOpen = false;\n  isScrolled = false;\n  currentTheme = 'light';\n  currentLanguage = 'fr';\n  activeSection = 'home';\n\n  constructor(\n    private themeService: ThemeService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.themeService.currentTheme$.subscribe(theme => {\n      this.currentTheme = theme;\n    });\n\n    this.translationService.currentLanguage$.subscribe(language => {\n      this.currentLanguage = language;\n    });\n  }\n\n  @HostListener('window:scroll', [])\n  onWindowScroll() {\n    this.isScrolled = window.pageYOffset > 50;\n    this.updateActiveSection();\n  }\n\n  private updateActiveSection() {\n    const sections = ['home', 'about', 'skills', 'experience', 'projects', 'contact'];\n    const scrollPosition = window.pageYOffset + 100;\n\n    for (const section of sections) {\n      const element = document.getElementById(section);\n      if (element) {\n        const offsetTop = element.offsetTop;\n        const offsetHeight = element.offsetHeight;\n        \n        if (scrollPosition >= offsetTop && scrollPosition < offsetTop + offsetHeight) {\n          this.activeSection = section;\n          break;\n        }\n      }\n    }\n  }\n\n  toggleMenu() {\n    this.isMenuOpen = !this.isMenuOpen;\n  }\n\n  toggleTheme() {\n    this.themeService.toggleTheme();\n  }\n\n  toggleLanguage() {\n    this.translationService.toggleLanguage();\n  }\n\n  translate(key: string): string {\n    return this.translationService.translate(key);\n  }\n\n  scrollToSection(sectionId: string) {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n      this.isMenuOpen = false;\n    }\n  }\n}\n","size_bytes":2148},"src/app/components/home/home.component.ts":{"content":"import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslationService } from '../../services/translation.service';\n\n@Component({\n  selector: 'app-home',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  \n  constructor(private translationService: TranslationService) {}\n\n  ngOnInit() {}\n\n  translate(key: string): string {\n    return this.translationService.translate(key);\n  }\n\n  downloadCV() {\n    // Create a mock CV download - in real implementation, this would download an actual PDF\n    const link = document.createElement('a');\n    link.href = 'data:text/plain;charset=utf-8,CV - Talel Kbaier - Ingénieur Cloud & Développeur Web\\n\\nExpérience:\\n- 2023-Présent: Développeur chez Triweb\\n- 2022: Développeur Freelance\\n- 2021: Stage PFE Business Analytics chez Assurance COMAR\\n\\nFormation:\\n- 2022-Présent: Ingénierie Cloud Computing & Architecture - ESPRIT\\n- 2020-2022: Licence Business Intelligence - FSEGT\\n\\nCompétences:\\n- Programmation: Python, Java Spring\\n- Web: HTML5, CSS3, JavaScript, Angular, Node.js, PHP, WordPress\\n- Cloud & DevOps: OpenStack, Docker, Kubernetes, Ansible, Jenkins\\n- BI: SQL Server, MongoDB, Power BI\\n\\nContact:\\n- Email: k.talel99@gmail.com\\n- Téléphone: +216 20 887 855';\n    link.download = 'CV_Talel_Khaldi.pdf';\n    link.click();\n  }\n}\n","size_bytes":1476},"src/app/components/projects/projects.component.ts":{"content":"import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslationService } from '../../services/translation.service';\n\ninterface Project {\n  title: string;\n  description: string;\n  technologies: string[];\n  category: string;\n  image?: string;\n  link?: string;\n  github?: string;\n  status: 'completed' | 'in-progress' | 'planned';\n  featured: boolean;\n}\n\n@Component({\n  selector: 'app-projects',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './projects.component.html',\n  styleUrls: ['./projects.component.scss']\n})\nexport class ProjectsComponent implements OnInit {\n  \n  projects: Project[] = [\n    {\n      title: 'E-commerce Platform',\n      description: 'Plateforme e-commerce complète avec gestion des commandes, paiements et tableau de bord administrateur.',\n      technologies: ['Angular', 'Spring Boot', 'PostgreSQL', 'Docker'],\n      category: 'web',\n      status: 'completed',\n      featured: true,\n      github: '#'\n    },\n    {\n      title: 'Cloud Infrastructure Automation',\n      description: 'Automatisation du déploiement d\\'infrastructures cloud avec Ansible et Terraform.',\n      technologies: ['Ansible', 'Terraform', 'AWS', 'Docker', 'Jenkins'],\n      category: 'cloud',\n      status: 'completed',\n      featured: true,\n      github: '#'\n    },\n    {\n      title: 'Business Intelligence Dashboard',\n      description: 'Tableau de bord BI pour l\\'analyse des données de ventes et la visualisation des KPIs.',\n      technologies: ['Power BI', 'SQL Server', 'Python', 'DAX'],\n      category: 'data',\n      status: 'completed',\n      featured: true,\n      link: '#'\n    },\n    {\n      title: 'Mobile App React Native',\n      description: 'Application mobile cross-platform pour la gestion de tâches avec synchronisation cloud.',\n      technologies: ['React Native', 'Node.js', 'MongoDB', 'Firebase'],\n      category: 'mobile',\n      status: 'in-progress',\n      featured: false,\n      github: '#'\n    },\n    {\n      title: 'Microservices Architecture',\n      description: 'Architecture microservices pour une application de gestion d\\'entreprise.',\n      technologies: ['Spring Boot', 'Docker', 'Kubernetes', 'Redis'],\n      category: 'cloud',\n      status: 'completed',\n      featured: false,\n      github: '#'\n    },\n    {\n      title: 'AI Chatbot Integration',\n      description: 'Intégration d\\'un chatbot IA pour le support client avec traitement du langage naturel.',\n      technologies: ['Python', 'TensorFlow', 'Node.js', 'WebSocket'],\n      category: 'ai',\n      status: 'in-progress',\n      featured: false,\n      github: '#'\n    }\n  ];\n\n  projectCategories = [\n    { key: 'all', name: 'Tous les projets' },\n    { key: 'web', name: 'Web Development' },\n    { key: 'cloud', name: 'Cloud & DevOps' },\n    { key: 'data', name: 'Data & BI' },\n    { key: 'mobile', name: 'Mobile' },\n    { key: 'ai', name: 'AI & ML' }\n  ];\n\n  activeCategory = 'all';\n\n  constructor(private translationService: TranslationService) {}\n\n  ngOnInit() {}\n\n  translate(key: string): string {\n    return this.translationService.translate(key);\n  }\n\n  getFilteredProjects(): Project[] {\n    if (this.activeCategory === 'all') {\n      return this.projects;\n    }\n    return this.projects.filter(project => project.category === this.activeCategory);\n  }\n\n  getFeaturedProjects(): Project[] {\n    return this.projects.filter(project => project.featured);\n  }\n\n  setActiveCategory(category: string) {\n    this.activeCategory = category;\n  }\n\n  getStatusClass(status: string): string {\n    switch (status) {\n      case 'completed':\n        return 'status-completed';\n      case 'in-progress':\n        return 'status-progress';\n      case 'planned':\n        return 'status-planned';\n      default:\n        return '';\n    }\n  }\n\n  getStatusText(status: string): string {\n    switch (status) {\n      case 'completed':\n        return this.translate('projects.completed');\n      case 'in-progress':\n        return this.translate('projects.inProgress');\n      case 'planned':\n        return this.translate('projects.planned');\n      default:\n        return '';\n    }\n  }\n}\n","size_bytes":4132},"src/app/components/skills/skills.component.ts":{"content":"import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslationService } from '../../services/translation.service';\n\ninterface Skill {\n  name: string;\n  level: number;\n  icon: string;\n  category: string;\n}\n\n@Component({\n  selector: 'app-skills',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './skills.component.html',\n  styleUrls: ['./skills.component.scss']\n})\nexport class SkillsComponent implements OnInit {\n  \n  skills: Skill[] = [\n    // Programming\n    { name: 'Python', level: 90, icon: 'fab fa-python', category: 'programming' },\n    { name: 'Java Spring', level: 85, icon: 'fab fa-java', category: 'programming' },\n    { name: 'JavaScript', level: 88, icon: 'fab fa-js-square', category: 'programming' },\n    { name: 'TypeScript', level: 82, icon: 'fab fa-js-square', category: 'programming' },\n    \n    // Web Development  \n    { name: 'Angular', level: 85, icon: 'fab fa-angular', category: 'web' },\n    { name: 'Node.js', level: 80, icon: 'fab fa-node-js', category: 'web' },\n    { name: 'React', level: 78, icon: 'fab fa-react', category: 'web' },\n    { name: '.NET', level: 75, icon: 'fab fa-microsoft', category: 'web' },\n    { name: 'WordPress', level: 82, icon: 'fab fa-wordpress', category: 'web' },\n    { name: 'HTML5/CSS3', level: 95, icon: 'fab fa-html5', category: 'web' },\n    { name: 'React Native', level: 75, icon: 'fab fa-react', category: 'web' },\n    { name: 'PHP', level: 78, icon: 'fab fa-php', category: 'web' },\n    \n    // Cloud & DevOps\n    { name: 'OpenStack', level: 88, icon: 'fas fa-cloud', category: 'cloud' },\n    { name: 'Docker', level: 85, icon: 'fab fa-docker', category: 'cloud' },\n    { name: 'Kubernetes', level: 80, icon: 'fas fa-dharmachakra', category: 'cloud' },\n    { name: 'Ansible', level: 78, icon: 'fas fa-cogs', category: 'cloud' },\n    { name: 'Jenkins', level: 75, icon: 'fas fa-tools', category: 'cloud' },\n    { name: 'Prometheus', level: 72, icon: 'fas fa-chart-area', category: 'cloud' },\n    { name: 'Grafana', level: 70, icon: 'fas fa-chart-line', category: 'cloud' },\n    { name: 'Heat', level: 78, icon: 'fas fa-fire', category: 'cloud' },\n    { name: 'Helm', level: 70, icon: 'fas fa-ship', category: 'cloud' },\n    \n    // Databases & BI\n    { name: 'SQL Server', level: 85, icon: 'fas fa-database', category: 'database' },\n    { name: 'MongoDB', level: 80, icon: 'fas fa-leaf', category: 'database' },\n    { name: 'Power BI', level: 88, icon: 'fas fa-chart-line', category: 'database' },\n    { name: 'phpMyAdmin', level: 82, icon: 'fas fa-database', category: 'database' },\n    { name: 'Excel', level: 90, icon: 'fas fa-file-excel', category: 'database' },\n    \n    // Tools\n    { name: 'Git', level: 90, icon: 'fab fa-git-alt', category: 'tools' },\n    { name: 'Linux/Ubuntu', level: 85, icon: 'fab fa-ubuntu', category: 'tools' },\n    { name: 'Selenium', level: 82, icon: 'fas fa-robot', category: 'tools' },\n    { name: 'Samba', level: 78, icon: 'fas fa-folder-open', category: 'tools' },\n    { name: 'Packet Tracer', level: 75, icon: 'fas fa-network-wired', category: 'tools' },\n    { name: 'Odoo', level: 72, icon: 'fas fa-shopping-cart', category: 'tools' }\n  ];\n\n  skillCategories = [\n    { key: 'programming', name: 'Programming' },\n    { key: 'web', name: 'Web Development' },\n    { key: 'cloud', name: 'Cloud & DevOps' },\n    { key: 'database', name: 'Databases & BI' },\n    { key: 'tools', name: 'Tools & Others' }\n  ];\n\n  activeCategory = 'all';\n\n  constructor(private translationService: TranslationService) {}\n\n  ngOnInit() {\n    // Animate skill bars after component loads\n    setTimeout(() => this.animateSkillBars(), 500);\n  }\n\n  translate(key: string): string {\n    return this.translationService.translate(key);\n  }\n\n  getFilteredSkills(): Skill[] {\n    if (this.activeCategory === 'all') {\n      return this.skills;\n    }\n    return this.skills.filter(skill => skill.category === this.activeCategory);\n  }\n\n  getSkillsByCategory(): { [key: string]: Skill[] } {\n    const grouped: { [key: string]: Skill[] } = {};\n    this.skillCategories.forEach(category => {\n      grouped[category.key] = this.skills.filter(skill => skill.category === category.key);\n    });\n    return grouped;\n  }\n\n  getCategoryTitle(categoryKey: string): string {\n    const category = this.skillCategories.find(cat => cat.key === categoryKey);\n    return this.translate('skills.' + categoryKey);\n  }\n\n  setActiveCategory(category: string) {\n    this.activeCategory = category;\n    // Re-animate skill bars when category changes\n    setTimeout(() => this.animateSkillBars(), 100);\n  }\n\n  private animateSkillBars() {\n    const skillBars = document.querySelectorAll('.skill-progress-fill');\n    skillBars.forEach((bar, index) => {\n      setTimeout(() => {\n        const level = this.getFilteredSkills()[index]?.level || 0;\n        (bar as HTMLElement).style.width = `${level}%`;\n      }, index * 100);\n    });\n  }\n}\n","size_bytes":4949}},"version":1}